{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/edtechrepo/entrada-queries/blob/main/Colab%20Faculty%20Entrada%20Queries%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fSH_5HKRbxpv"
      },
      "source": [
        "NOTE: the csv is deleted as soon as the notebook runtime is terminated. A copy of the csv can be found on the github page"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I4syb80OWaXS"
      },
      "source": [
        "- [ ] Duplicate Data\n",
        "- [ ] Make all queries lowercase"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QexDhHJ2Apvd"
      },
      "source": [
        "# Cleaning Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "key7VdZRbJo6",
        "outputId": "480c815f-82b3-4175-bbe6-7def4eda1e11"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Collecting fuzzywuzzy\n",
            "  Downloading fuzzywuzzy-0.18.0-py2.py3-none-any.whl.metadata (4.9 kB)\n",
            "Collecting python-Levenshtein\n",
            "  Downloading python_Levenshtein-0.26.1-py3-none-any.whl.metadata (3.7 kB)\n",
            "Collecting Levenshtein==0.26.1 (from python-Levenshtein)\n",
            "  Downloading levenshtein-0.26.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.2 kB)\n",
            "Collecting rapidfuzz<4.0.0,>=3.9.0 (from Levenshtein==0.26.1->python-Levenshtein)\n",
            "  Downloading rapidfuzz-3.10.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\n",
            "Downloading fuzzywuzzy-0.18.0-py2.py3-none-any.whl (18 kB)\n",
            "Downloading python_Levenshtein-0.26.1-py3-none-any.whl (9.4 kB)\n",
            "Downloading levenshtein-0.26.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (162 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m162.6/162.6 kB\u001b[0m \u001b[31m6.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading rapidfuzz-3.10.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.1 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.1/3.1 MB\u001b[0m \u001b[31m15.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: fuzzywuzzy, rapidfuzz, Levenshtein, python-Levenshtein\n",
            "Successfully installed Levenshtein-0.26.1 fuzzywuzzy-0.18.0 python-Levenshtein-0.26.1 rapidfuzz-3.10.1\n"
          ]
        }
      ],
      "source": [
        "#imports\n",
        "!pip install fuzzywuzzy python-Levenshtein\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.cluster import KMeans, AgglomerativeClustering, DBSCAN\n",
        "from sklearn.decomposition import LatentDirichletAllocation\n",
        "from sklearn.metrics import silhouette_score\n",
        "import matplotlib.pyplot as plt\n",
        "import re\n",
        "from fuzzywuzzy import fuzz\n",
        "from fuzzywuzzy import process\n",
        "from difflib import SequenceMatcher"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "x_BM4zveW-nU"
      },
      "outputs": [],
      "source": [
        "# Load your data\n",
        "df = pd.read_csv('Faculty Entrada Queries.csv')\n",
        "\n",
        "# Load and remove whitespace\n",
        "df['Queries'] = df['Queries'].str.strip()\n",
        "\n",
        "# lowercasing result_sorted\n",
        "df['Queries'] = df['Queries'].str.lower()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KjIVh7jXhV5a"
      },
      "outputs": [],
      "source": [
        "# manual mapping of similar terms that combine_similar won't pick up\n",
        "# 0.9, no mapping = 151 rows\n",
        "# 0.9 + mapping = 147 rows - good!\n",
        "\n",
        "manual_mapping = {\n",
        "    'trauma informed':'trauma informed practice',\n",
        "    'neonat': 'neonatology',\n",
        "    'attention deficit':'attention deficit hyperactivity disorder',\n",
        "    'trauma-inform':'trauma informed practice',\n",
        "    'nortth':'north'\n",
        "}\n",
        "\n",
        "df['Queries'] = df['Queries'].map(manual_mapping).fillna(df['Queries'])\n",
        "\n",
        "# adjustments from threshold = 0.8\n",
        "# bc guidelines 13 guidelines 5 -> bc guidelines 18\n",
        "# time management 7 management 10 -> time management 17\n",
        "# trauma informed 22 trauma informed practice 14\n",
        "# attention deficit hyperactivity disorder 16 attention deficit 3\n",
        "# neonat 6 neonatology 6\n",
        "\n",
        "#potential groups\n",
        "  #rural+cbl rural\n",
        "  #sexual + sexual abuse\n",
        "  #cbl hypothalamic + hypothalamic"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Fr09ZbiKflPh",
        "outputId": "12ac4626-db61-4335-db50-d1bad45c97e0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                       Queries  Event count\n",
            "0    motivational interviewing           61\n",
            "1                    parkinson           60\n",
            "2     trauma informed practice           36\n",
            "3                *filters only           33\n",
            "4                 hypothalamic           29\n",
            "..                         ...          ...\n",
            "142                   calendar            3\n",
            "143              communication            3\n",
            "144                   abortion            3\n",
            "145                        wba            3\n",
            "146                 theme lead            3\n",
            "\n",
            "[147 rows x 2 columns]\n"
          ]
        }
      ],
      "source": [
        "#combines similar queries\n",
        "\n",
        "def similarity_ratio(a, b):\n",
        "    if pd.isna(a) or pd.isna(b):\n",
        "        return 0\n",
        "    return SequenceMatcher(None, str(a).lower(), str(b).lower()).ratio()\n",
        "    # takes 2 strings, finds same letters/characters, length of characters that are the same\n",
        "    # return similarity score (DOUBLE) based on sizes of similar chunks\n",
        "\n",
        "def combine_similar(df, query_col='Queries', count_col='Event count', threshold=0.9):\n",
        "  # 0.9 = 151 rows, no mapping\n",
        "    combined = {}\n",
        "    for i, row in df.iterrows():\n",
        "        if pd.isna(row[query_col]):\n",
        "            continue\n",
        "        matched = False\n",
        "        for key in combined:\n",
        "            if similarity_ratio(row[query_col], key) >= threshold:\n",
        "              #if similar, combine the two and make 1 row\n",
        "                combined[key] += row[count_col]\n",
        "                matched = True\n",
        "                break\n",
        "        if not matched:\n",
        "            #if not matched make separate\n",
        "            combined[row[query_col]] = row[count_col]\n",
        "    return pd.DataFrame({query_col: combined.keys(), count_col: combined.values()})\n",
        "    # go thru rows of queries and compares to each other\n",
        "\n",
        "# Load your CSV file\n",
        "\n",
        "result = combine_similar(df)\n",
        "result_sorted = result.sort_values('Event count', ascending=False).reset_index(drop=True)\n",
        "pd.set_option('display.max_rows', 10)\n",
        "\n",
        "\n",
        "# Display all rows\n",
        "print(result_sorted)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EbKmdy5OAknq",
        "outputId": "fa741125-e491-4657-fac7-04daf4f08ada"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                               Queries  Event count\n",
            "0                            motivational interviewing           61\n",
            "1                                            parkinson           60\n",
            "2                             trauma informed practice           36\n",
            "3                                        *filters only           33\n",
            "4                                         hypothalamic           29\n",
            "5                       faculty of medicine governance           24\n",
            "6                                     eating disorders           24\n",
            "7                                            toxidrome           21\n",
            "8             attention deficit hyperactivity disorder           19\n",
            "9                                adolescent depression           18\n",
            "10                                cultural sensitivity           18\n",
            "11                                     professionalism           17\n",
            "12                                       cholecystitis           15\n",
            "13                                   breast exam video           14\n",
            "14                  canadian resident matching service           14\n",
            "15                                           recording           13\n",
            "16                                          ophthalmol           13\n",
            "17                                                flex           13\n",
            "18                                       bc guidelines           13\n",
            "19                                  chronic pain panel           13\n",
            "20                                  respiratory system           13\n",
            "21                                             absence           12\n",
            "22                                         dermatology           12\n",
            "23                                         breast exam           12\n",
            "24                                physiology of ageing           12\n",
            "25                    policy on students and the media           12\n",
            "26                                         neonatology           12\n",
            "27                                          withdrawal           11\n",
            "28               development of the respiratory system           11\n",
            "29                                              policy           11\n",
            "30                    case based learning hypothalamic           11\n",
            "31                             child abuse and neglect           11\n",
            "32                                        chronic pain           11\n",
            "33                                     flex repository           11\n",
            "34                                        somatization           11\n",
            "35                            somatic symptom disorder           10\n",
            "36                                          management           10\n",
            "37                                           insurance           10\n",
            "38                                   exit competencies           10\n",
            "39                                             panopto           10\n",
            "40                                determinants of hope           10\n",
            "41                                         flex regist           10\n",
            "42                                      abdominal pain            9\n",
            "43                                              sexual            9\n",
            "44                                              gender            9\n",
            "45                                                iron            9\n",
            "46                                          attachment            9\n",
            "47                                          case brian            9\n",
            "48                                        sexual abuse            9\n",
            "49                                            violence            8\n",
            "50                                             scholar            8\n",
            "51                                       public health            8\n",
            "52                                    planetary health            8\n",
            "53                                  nutrition and exit            8\n",
            "54                                             fatigue            8\n",
            "55                                   caregiver burnout            8\n",
            "56                                               edema            8\n",
            "57                                          sexualized            7\n",
            "58                                     time management            7\n",
            "59                       social determinants of health            7\n",
            "60                                               aging            7\n",
            "61                                             refugee            7\n",
            "62                                                pgx2            7\n",
            "63                                      opioid driving            7\n",
            "64                                            lipidema            7\n",
            "65                                                hope            7\n",
            "66                                                 eye            7\n",
            "67                                      driving safety            7\n",
            "68   canadian resident matching service personal le...            7\n",
            "69                          assessment mechanism video            7\n",
            "70                                       antiepileptic            7\n",
            "71                                   scheduling policy            7\n",
            "72                                            practice            7\n",
            "73                                       refugee heath            6\n",
            "74                                        opioid renal            6\n",
            "75                portfolio assessment mechanism video            6\n",
            "76                             panopto account sign up            6\n",
            "77                                               video            6\n",
            "78                                       opioid kidney            6\n",
            "79                              androgen insensitivity            6\n",
            "80                          medd 421 lecture recording            6\n",
            "81                                                quiz            6\n",
            "82                        neonatal intensive care unit            6\n",
            "83                                            jaundice            6\n",
            "84                  occupational therapy nortth cohort            6\n",
            "85                                          indigenous            6\n",
            "86                                      neuroradiology            5\n",
            "87                                         courtmarche            5\n",
            "88                                        determinants            5\n",
            "89                                             driving            5\n",
            "90                                          geriatrics            5\n",
            "91                                          guidelines            5\n",
            "92                                    mood stabilizers            5\n",
            "93                                            must see            5\n",
            "94                                  policies and forms            5\n",
            "95                                              ocular            5\n",
            "96                                               ortho            5\n",
            "97                                        child health            5\n",
            "98                                           prolonged            5\n",
            "99                                          resilience            5\n",
            "100                                    student absence            5\n",
            "101                                     taser dementie            5\n",
            "102                                         transplant            5\n",
            "103                                      videsh kapoor            5\n",
            "104                                  year 2 assessment            5\n",
            "105                                       courtemanche            5\n",
            "106                                       fibromyalgia            5\n",
            "107                                            chatgpt            5\n",
            "108                                     intan schrader            5\n",
            "109                                          formulary            5\n",
            "110                                         up to date            5\n",
            "111                                   assessment video            5\n",
            "112           summative portfolio form assessment form            5\n",
            "113                                     absence policy            5\n",
            "114                                advisor meeting log            5\n",
            "115                          case based learning rural            5\n",
            "116                                     coach handbook            5\n",
            "117                          electroconvulsive therapy            5\n",
            "118                                           headache            5\n",
            "119                                              rural            5\n",
            "120                        interprofessional education            5\n",
            "121             quality improvement and patient safety            5\n",
            "122                                  medd 411 archived            5\n",
            "123                    transition to clinical learning            5\n",
            "124                                         smp awards            5\n",
            "125                                          addiction            5\n",
            "126                                               phrm            5\n",
            "127                               node package manager            5\n",
            "128                                             madden            5\n",
            "129                 medd 421 lecture recording doroudi            5\n",
            "130                                    access medicine            3\n",
            "131                                             social            3\n",
            "132                                          post call            3\n",
            "133                                          nutrition            3\n",
            "134                                 mental status exam            3\n",
            "135                                excitable membranes            3\n",
            "136                    case based learning obstructive            3\n",
            "137                              cardiac physical exam            3\n",
            "138                                               pain            3\n",
            "139                             perinatal pharmacology            3\n",
            "140                                            med 412            3\n",
            "141                  entrustable professional activity            3\n",
            "142                                           calendar            3\n",
            "143                                      communication            3\n",
            "144                                           abortion            3\n",
            "145                         workplace based assessment            3\n",
            "146                                         theme lead            3\n"
          ]
        }
      ],
      "source": [
        "#acronym dictionary, expands acronyms and applies them\n",
        "#acronym dictionary\n",
        "acronym_map = {\n",
        "    'adhd': 'attention deficit hyperactivity disorder',\n",
        "    'cbl': 'case based learning',\n",
        "    'ot': 'occupational therapy',\n",
        "    'carms': 'canadian resident matching service',\n",
        "    'nicu': 'neonatal intensive care unit',\n",
        "    'spf': 'summative portfolio form',\n",
        "    #'npm': 'northern medical program',\n",
        "    'qips': 'quality improvement and patient safety',\n",
        "    'wba': 'workplace based assessment',\n",
        "    'epa': 'entrustable professional activity'\n",
        "}\n",
        "\n",
        "# Function to expand acronyms\n",
        "def expand_acronyms(text):\n",
        "  #takes text, isolates it and replaces w longer version of word\n",
        "    words = text.split()\n",
        "    expanded_words = [acronym_map.get(word, word) for word in words]\n",
        "    return ' '.join(expanded_words)\n",
        "\n",
        "\n",
        "# Apply preprocessing\n",
        "result_sorted['Queries'] = result_sorted['Queries'].apply(expand_acronyms)\n",
        "\n",
        "pd.set_option('display.max_rows', None)\n",
        "\n",
        "print(result_sorted)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 146
        },
        "id": "FFFa79f0LHAA",
        "outputId": "caa935db-888c-4fa5-b646-8f24a2a9be10"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Queries        parkinson*filters onlyhypothalamicmotivational...\n",
              "Event count                                                 1299\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Queries</th>\n",
              "      <td>parkinson*filters onlyhypothalamicmotivational...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Event count</th>\n",
              "      <td>1299</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kQhNV5he3mcS"
      },
      "source": [
        "##for future"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "PjwccmCLCJyb"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZpKHmoDSi1IV",
        "outputId": "c7bbb353-bdc1-4321-bd6c-19c229ebbe7e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                       Queries  Event count\n",
            "0    motivational interviewing           61\n",
            "1                    parkinson           60\n",
            "2                 hypothalamic           40\n",
            "3              trauma informed           36\n",
            "4                *Filters Only           33\n",
            "..                         ...          ...\n",
            "129                       pain            3\n",
            "130              communication            3\n",
            "131                   abortion            3\n",
            "132                        WBA            3\n",
            "133                 theme lead            3\n",
            "\n",
            "[134 rows x 2 columns]\n"
          ]
        }
      ],
      "source": [
        "def group_similar_queries(df, column_name, threshold=80):\n",
        "    # Get unique queries\n",
        "    unique_queries = df[column_name].unique()\n",
        "\n",
        "    # Dictionary to store grouped queries\n",
        "    grouped_queries = {}\n",
        "\n",
        "    for query in unique_queries:\n",
        "        if query not in grouped_queries:\n",
        "            # Find similar queries\n",
        "            matches = process.extract(query, unique_queries, limit=len(unique_queries), scorer=fuzz.ratio)\n",
        "\n",
        "            # Group queries that meet the similarity threshold\n",
        "            similar = [match[0] for match in matches if match[1] >= threshold]\n",
        "\n",
        "            # Use the most common query as the standardized form\n",
        "            standard = df[df[column_name].isin(similar)][column_name].mode().iloc[0]\n",
        "\n",
        "            # Add to grouped_queries dictionary\n",
        "            for sim in similar:\n",
        "                grouped_queries[sim] = standard\n",
        "\n",
        "    return grouped_queries\n",
        "\n",
        "# Apply the function to your DataFrame\n",
        "grouped = group_similar_queries(df, 'Queries')\n",
        "\n",
        "# Create a new column with standardized queries\n",
        "df['standardized_query'] = df['Queries'].map(grouped)\n",
        "\n",
        "#bc guidelines 13 guidelines 5 -> bc guidelines 18\n",
        "#time management 7 management 10 -> time management 17\n",
        "#trauma informed 22 trauma informed practice 14\n",
        "#attention deficit hyperactivity disorder 16 attention deficit 3\n",
        "#neonat 6 neonatology 6 neonatal intensive care unit 6\n",
        "\n",
        "\n",
        "# Display all rows\n",
        "print(result_sorted)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GNfwNH-Ma73m"
      },
      "source": [
        "# Iterations"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xSyeWjHyAOvJ"
      },
      "source": [
        "## Entrada Queries: 1st iteration\n",
        "- [ ] Create a description of the project in the teams project folder. Create a word doc explaining what we are doing.\n",
        "- [ ] Get the search query data in this project.\n",
        "\n",
        "2024-10-15-09:45am.\n",
        "\n",
        "- [ ] Start working on themes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BobL3JulAoZj"
      },
      "outputs": [],
      "source": [
        "#combines similar queries\n",
        "\n",
        "pd.set_option('display.max_rows', None)\n",
        "\n",
        "def similarity_ratio(a, b):\n",
        "    if pd.isna(a) or pd.isna(b):\n",
        "        return 0\n",
        "    return SequenceMatcher(None, str(a).lower(), str(b).lower()).ratio()\n",
        "\n",
        "def combine_similar(df, query_col='Queries', count_col='Event count', threshold=0.8):\n",
        "    combined = {}\n",
        "    for i, row in df.iterrows():\n",
        "        if pd.isna(row[query_col]):\n",
        "            continue\n",
        "        matched = False\n",
        "        for key in combined:\n",
        "            if similarity_ratio(row[query_col], key) >= threshold:\n",
        "                combined[key] += row[count_col]\n",
        "                matched = True\n",
        "                break\n",
        "        if not matched:\n",
        "            combined[row[query_col]] = row[count_col]\n",
        "    return pd.DataFrame({query_col: combined.keys(), count_col: combined.values()})\n",
        "\n",
        "# Load your CSV file\n",
        "\n",
        "result = combine_similar(df)\n",
        "result_sorted = result.sort_values('Event count', ascending=False).reset_index(drop=True)\n",
        "\n",
        "# Display all rows\n",
        "#print(result_sorted)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 146
        },
        "id": "7gfHBXHCAscr",
        "outputId": "38b69bc8-3bd5-4015-c7ed-5f70c25412bc"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Queries</th>\n",
              "      <td>motivational interviewingparkinsonhypothalamic...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Event count</th>\n",
              "      <td>1266</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ],
            "text/plain": [
              "Queries        motivational interviewingparkinsonhypothalamic...\n",
              "Event count                                                 1266\n",
              "dtype: object"
            ]
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "result_sorted.sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-Ck9VtfVAxOL"
      },
      "outputs": [],
      "source": [
        "#Organizing into Query types\n",
        "\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.cluster import KMeans\n",
        "\n",
        "#takes queries and lists them by order\n",
        "queries = result_sorted['Queries'].tolist()\n",
        "\n",
        "#sets up the data to be organized\n",
        "vectorizer = TfidfVectorizer(stop_words='english')\n",
        "X = vectorizer.fit_transform(queries)\n",
        "\n",
        "#alterable\n",
        "num_clusters = 70\n",
        "\n",
        "#method of clustering data\n",
        "kmeans = KMeans(n_clusters=num_clusters, random_state=42)\n",
        "kmeans.fit(X)\n",
        "\n",
        "\n",
        "result_sorted['cluster'] = kmeans.labels_\n",
        "\n",
        "# Display queries in each cluster\n",
        "#for i in range(num_clusters):\n",
        " #   print(f\"Cluster {i}:\")\n",
        "  #  print(result_sorted[result_sorted['cluster'] == i]['Queries'].head().tolist())\n",
        "   # print(\"\\n\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lRUDJC-8AzIc",
        "outputId": "58ccad9e-c724-4029-9529-f7639834f881"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Total number of queries: 142\n",
            "Number of queries assigned to clusters: 142\n"
          ]
        }
      ],
      "source": [
        "#check for all queries assigned to clusters\n",
        "print(f\"Total number of queries: {len(result_sorted)}\")\n",
        "print(f\"Number of queries assigned to clusters: {result_sorted['cluster'].count()}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "49ZAbPB8A1lc",
        "outputId": "214742d0-b380-437c-ab9c-5663c01a32c6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Cluster 0:\n",
            "- edema\n",
            "Total queries in Cluster 0: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 1:\n",
            "- assessment mechanism video\n",
            "- video\n",
            "- assessment  video\n",
            "Total queries in Cluster 1: 3\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 2:\n",
            "- determinants\n",
            "Total queries in Cluster 2: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 3:\n",
            "- sexual\n",
            "- sexual abuse\n",
            "Total queries in Cluster 3: 2\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 4:\n",
            "- driving safety\n",
            "Total queries in Cluster 4: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 5:\n",
            "- absence\n",
            "- student absence\n",
            "- absence policy\n",
            "Total queries in Cluster 5: 3\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 6:\n",
            "- chronic pain panel\n",
            "- abdominal pain\n",
            "- pain\n",
            "Total queries in Cluster 6: 3\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 7:\n",
            "- trauma informed\n",
            "- trauma informed practice\n",
            "- practice\n",
            "Total queries in Cluster 7: 3\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 8:\n",
            "- excitable membranes\n",
            "Total queries in Cluster 8: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 9:\n",
            "- nutrition and exit\n",
            "- nutrition\n",
            "Total queries in Cluster 9: 2\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 10:\n",
            "- policy on students and the media\n",
            "- policy\n",
            "- Scheduling policy\n",
            "Total queries in Cluster 10: 3\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 11:\n",
            "- flex\n",
            "- flex repository\n",
            "- flex regist\n",
            "Total queries in Cluster 11: 3\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 12:\n",
            "- child abuse and neglect\n",
            "Total queries in Cluster 12: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 13:\n",
            "- planetary health\n",
            "Total queries in Cluster 13: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 14:\n",
            "- MEDD 411 archived\n",
            "Total queries in Cluster 14: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 15:\n",
            "- scholar\n",
            "Total queries in Cluster 15: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 16:\n",
            "- rural\n",
            "- CBL rural\n",
            "Total queries in Cluster 16: 2\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 17:\n",
            "- hypothalamic\n",
            "Total queries in Cluster 17: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 18:\n",
            "- respiratory system\n",
            "- Development of the respiratory system\n",
            "Total queries in Cluster 18: 2\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 19:\n",
            "- breast exam video\n",
            "- breast exam\n",
            "Total queries in Cluster 19: 2\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 20:\n",
            "- access medicine\n",
            "Total queries in Cluster 20: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 21:\n",
            "- violence\n",
            "Total queries in Cluster 21: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 22:\n",
            "- NPM\n",
            "Total queries in Cluster 22: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 23:\n",
            "- refugee\n",
            "- refugee heath\n",
            "Total queries in Cluster 23: 2\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 24:\n",
            "- opioid renal\n",
            "Total queries in Cluster 24: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 25:\n",
            "- neuroradiology\n",
            "Total queries in Cluster 25: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 26:\n",
            "- recording\n",
            "Total queries in Cluster 26: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 27:\n",
            "- determinants of hope\n",
            "- hope\n",
            "Total queries in Cluster 27: 2\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 28:\n",
            "- neonat\n",
            "Total queries in Cluster 28: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 29:\n",
            "- panopto\n",
            "- panopto account sign up\n",
            "Total queries in Cluster 29: 2\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 30:\n",
            "- carms\n",
            "- carms personal letters\n",
            "Total queries in Cluster 30: 2\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 31:\n",
            "- ADHD\n",
            "Total queries in Cluster 31: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 32:\n",
            "- geriatrics\n",
            "Total queries in Cluster 32: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 33:\n",
            "- taser dementie\n",
            "Total queries in Cluster 33: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 34:\n",
            "- Intan schrader\n",
            "Total queries in Cluster 34: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 35:\n",
            "- motivational interviewing\n",
            "Total queries in Cluster 35: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 36:\n",
            "- formulary\n",
            "Total queries in Cluster 36: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 37:\n",
            "- social determinants of health\n",
            "- social\n",
            "Total queries in Cluster 37: 2\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 38:\n",
            "- gender\n",
            "Total queries in Cluster 38: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 39:\n",
            "- resilience\n",
            "Total queries in Cluster 39: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 40:\n",
            "- Iron\n",
            "Total queries in Cluster 40: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 41:\n",
            "- communication\n",
            "Total queries in Cluster 41: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 42:\n",
            "- abortion\n",
            "Total queries in Cluster 42: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 43:\n",
            "- caregiver burnout\n",
            "Total queries in Cluster 43: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 44:\n",
            "- professionalism\n",
            "Total queries in Cluster 44: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 45:\n",
            "- HEADACHE\n",
            "Total queries in Cluster 45: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 46:\n",
            "- Interprofessional  education\n",
            "Total queries in Cluster 46: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 47:\n",
            "- policies and forms\n",
            "Total queries in Cluster 47: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 48:\n",
            "- adolescent depression\n",
            "Total queries in Cluster 48: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 49:\n",
            "- fibromyalgia\n",
            "Total queries in Cluster 49: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 50:\n",
            "- nicu\n",
            "Total queries in Cluster 50: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 51:\n",
            "- neonatology\n",
            "Total queries in Cluster 51: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 52:\n",
            "- case brian\n",
            "Total queries in Cluster 52: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 53:\n",
            "- Calendar\n",
            "Total queries in Cluster 53: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 54:\n",
            "- courtemanche\n",
            "Total queries in Cluster 54: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 55:\n",
            "- advisor meeting log\n",
            "Total queries in Cluster 55: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 56:\n",
            "- Coach Handbook\n",
            "Total queries in Cluster 56: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 57:\n",
            "- chatgpt\n",
            "Total queries in Cluster 57: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 58:\n",
            "- antiepileptic\n",
            "Total queries in Cluster 58: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 59:\n",
            "- prolonged\n",
            "Total queries in Cluster 59: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 60:\n",
            "- ortho\n",
            "Total queries in Cluster 60: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 61:\n",
            "- eating disorders\n",
            "- faculty of medicine governance\n",
            "- toxidrome\n",
            "- cultural sensitivity\n",
            "- bc guidelines\n",
            "- time management\n",
            "- cholecystitis\n",
            "- ophthalmol\n",
            "- dermatology\n",
            "- Physiology of Ageing\n",
            "- somatization\n",
            "- MEDD 421 lecture recording\n",
            "- withdrawal\n",
            "- insurance\n",
            "- somatic symptom disorder\n",
            "- fatigue\n",
            "- public health\n",
            "- sexualized\n",
            "- Aging\n",
            "- eye\n",
            "- lipidema\n",
            "- PGX2\n",
            "- jaundice\n",
            "- indigenous\n",
            "- androgen insensitivity\n",
            "- OT nortth cohort\n",
            "- opioid kidney\n",
            "- ocular\n",
            "- mood stabilizers\n",
            "- must see\n",
            "- videsh kapoor\n",
            "- year 2 assessment\n",
            "- child health\n",
            "- addiction\n",
            "- SPF assessment Form\n",
            "- Electroconvulsive Therapy\n",
            "- up to date\n",
            "- SMP awards\n",
            "- QIPS\n",
            "- Transition to Clinical Learning\n",
            "- Madden\n",
            "- post call\n",
            "- mental status exam\n",
            "- CBL obstructive\n",
            "- Attention deficit\n",
            "- Perinatal Pharmacology\n",
            "- Med 412\n",
            "- EPA\n",
            "- WBA\n",
            "- theme lead\n",
            "Total queries in Cluster 61: 50\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 62:\n",
            "- cardiac physical exam\n",
            "Total queries in Cluster 62: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 63:\n",
            "- transplant\n",
            "Total queries in Cluster 63: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 64:\n",
            "- exit competencies\n",
            "Total queries in Cluster 64: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 65:\n",
            "- PHRM\n",
            "Total queries in Cluster 65: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 66:\n",
            "- attachment\n",
            "Total queries in Cluster 66: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 67:\n",
            "- opioid driving\n",
            "- driving\n",
            "Total queries in Cluster 67: 2\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 68:\n",
            "- parkinson\n",
            "Total queries in Cluster 68: 1\n",
            "--------------------------------------------------\n",
            "\n",
            "Cluster 69:\n",
            "- quiz\n",
            "Total queries in Cluster 69: 1\n",
            "--------------------------------------------------\n"
          ]
        }
      ],
      "source": [
        "for cluster in sorted(result_sorted['cluster'].unique()):\n",
        "    print(f\"\\nCluster {cluster}:\")\n",
        "    cluster_queries = result_sorted[result_sorted['cluster'] == cluster]['Queries'].tolist()\n",
        "    for query in cluster_queries:\n",
        "        print(f\"- {query}\")\n",
        "    print(f\"Total queries in Cluster {cluster}: {len(cluster_queries)}\")\n",
        "    print(\"-\" * 50)  # Separator line\n",
        "\n",
        "# Summary statistics\n",
        "#print(\"\\nSummary:\")\n",
        "#print(result_sorted['cluster'].value_counts().sort_index())\n",
        "#print(f\"\\nTotal number of queries: {len(result_sorted)}\")\n",
        "#print(f\"Number of clusters: {result_sorted['cluster'].nunique()}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "E4nyEPG_DJSU"
      },
      "outputs": [],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BVz7QJSjA2hu"
      },
      "source": [
        "## Iteration 2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QWrMvSxPaoH3"
      },
      "outputs": [],
      "source": [
        "#combines similar queries\n",
        "\n",
        "pd.set_option('display.max_rows', None)\n",
        "\n",
        "def similarity_ratio(a, b):\n",
        "    if pd.isna(a) or pd.isna(b):\n",
        "        return 0\n",
        "    return SequenceMatcher(None, str(a).lower(), str(b).lower()).ratio()\n",
        "\n",
        "def combine_similar(df, query_col='Queries', count_col='Event count', threshold=0.8):\n",
        "    combined = {}\n",
        "    for i, row in df.iterrows():\n",
        "        if pd.isna(row[query_col]):\n",
        "            continue\n",
        "        matched = False\n",
        "        for key in combined:\n",
        "            if similarity_ratio(row[query_col], key) >= threshold:\n",
        "                combined[key] += row[count_col]\n",
        "                matched = True\n",
        "                break\n",
        "        if not matched:\n",
        "            combined[row[query_col]] = row[count_col]\n",
        "    return pd.DataFrame({query_col: combined.keys(), count_col: combined.values()})\n",
        "\n",
        "# Load your CSV file\n",
        "\n",
        "result = combine_similar(df)\n",
        "result_sorted = result.sort_values('Event count', ascending=False).reset_index(drop=True)\n",
        "\n",
        "# Display all rows\n",
        "#print(result_sorted)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "rvV82MXoA5CK",
        "outputId": "b644e493-9d34-42d2-8084-53d0e25ca214"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Kmeans Silhouette Score: 0.28306129040606065\n",
            "Kmeans Cluster Distribution:\n",
            "kmeans_cluster\n",
            "1    168\n",
            "4      6\n",
            "0      6\n",
            "2      2\n",
            "3      2\n",
            "Name: count, dtype: int64\n",
            "\n",
            "\n",
            "Hierarchical Silhouette Score: 0.31180829373392177\n",
            "Hierarchical Cluster Distribution:\n",
            "hierarchical_cluster\n",
            "0    160\n",
            "1      8\n",
            "4      6\n",
            "2      6\n",
            "3      4\n",
            "Name: count, dtype: int64\n",
            "\n",
            "\n",
            "Dbscan Silhouette Score: 0.24651827818506789\n",
            "Dbscan Cluster Distribution:\n",
            "dbscan_cluster\n",
            "-1    108\n",
            " 0     71\n",
            " 1      5\n",
            "Name: count, dtype: int64\n",
            "\n",
            "\n",
            "Lda Silhouette Score: 0.24191041109911854\n",
            "Lda Cluster Distribution:\n",
            "lda_cluster\n",
            "0    89\n",
            "1    29\n",
            "2    26\n",
            "3    24\n",
            "4    16\n",
            "Name: count, dtype: int64\n",
            "\n",
            "\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Top terms per K-means cluster:\n",
            "Cluster 0: health, social, determinants, child, withdrawal, hope, guidelines, governance, flex, fatigue\n",
            "Cluster 1: policy, exam, carms, assessment, video, pain, respiratory, flex, management, withdrawal\n",
            "Cluster 2: guidelines, withdrawal, determinants, hope, health, governance, flex, fatigue, faculty, exit\n",
            "Cluster 3: toxidrome, withdrawal, determinants, hope, health, guidelines, governance, flex, fatigue, faculty\n",
            "Cluster 4: motivational, interviewing, withdrawal, hypothalamic, health, guidelines, governance, flex, fatigue, faculty\n",
            "\n",
            "Top terms per LDA topic:\n",
            "Cluster 0: health, insurance, guidelines, toxidromes, adhd, refugee, rural, physiology, aging, sexual\n",
            "Cluster 1: motivational, interviewing, pain, respiratory, management, flex, recording, panopto, cholecystitis, medd\n",
            "Cluster 2: exam, carms, trauma, breast, driving, opioid, practice, medicine, informed, hypothalamic\n",
            "Cluster 3: policy, withdrawal, determinants, disorders, eating, fatigue, toxidrome, professionalism, sensitivity, cultural\n",
            "Cluster 4: assessment, video, absence, dermatology, child, mechanism, exit, social, hope, abuse\n"
          ]
        }
      ],
      "source": [
        "# Vectorize the text data\n",
        "vectorizer = TfidfVectorizer(stop_words='english', min_df=2, max_df=0.95)\n",
        "X = vectorizer.fit_transform(df['Queries'])\n",
        "\n",
        "# Function to evaluate clustering\n",
        "def evaluate_clustering(labels, X):\n",
        "    if len(set(labels)) > 1:  # Silhouette score requires at least 2 clusters\n",
        "        return silhouette_score(X, labels)\n",
        "    else:\n",
        "        return np.nan\n",
        "\n",
        "# 1. K-means\n",
        "n_clusters = 5  # Adjust as needed\n",
        "kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n",
        "df['kmeans_cluster'] = kmeans.fit_predict(X)\n",
        "\n",
        "# 2. Hierarchical Clustering\n",
        "hierarchical = AgglomerativeClustering(n_clusters=n_clusters)\n",
        "df['hierarchical_cluster'] = hierarchical.fit_predict(X.toarray())\n",
        "\n",
        "# 3. DBSCAN\n",
        "dbscan = DBSCAN(eps=0.5, min_samples=5)  # Adjust parameters as needed\n",
        "df['dbscan_cluster'] = dbscan.fit_predict(X)\n",
        "\n",
        "# 4. Latent Dirichlet Allocation (LDA)\n",
        "lda = LatentDirichletAllocation(n_components=n_clusters, random_state=42)\n",
        "lda_output = lda.fit_transform(X)\n",
        "df['lda_cluster'] = lda_output.argmax(axis=1)\n",
        "\n",
        "# Evaluate and compare results\n",
        "methods = ['kmeans', 'hierarchical', 'dbscan', 'lda']\n",
        "for method in methods:\n",
        "    score = evaluate_clustering(df[f'{method}_cluster'], X)\n",
        "    print(f\"{method.capitalize()} Silhouette Score: {score}\")\n",
        "    print(f\"{method.capitalize()} Cluster Distribution:\")\n",
        "    print(df[f'{method}_cluster'].value_counts())\n",
        "    print(\"\\n\")\n",
        "\n",
        "# Visualize results (example for K-means)\n",
        "plt.figure(figsize=(10, 6))\n",
        "df['kmeans_cluster'].value_counts().sort_index().plot(kind='bar')\n",
        "plt.title('Distribution of Queries Across K-means Clusters')\n",
        "plt.xlabel('Cluster')\n",
        "plt.ylabel('Number of Queries')\n",
        "plt.show()\n",
        "\n",
        "# Function to display top terms for each cluster\n",
        "def print_top_terms(cluster_centers, feature_names, top_n=10):\n",
        "    for i, center in enumerate(cluster_centers):\n",
        "        top_indices = center.argsort()[-top_n:][::-1]\n",
        "        top_terms = [feature_names[j] for j in top_indices]\n",
        "        print(f\"Cluster {i}: {', '.join(top_terms)}\")\n",
        "\n",
        "# Display top terms for K-means clusters\n",
        "print(\"Top terms per K-means cluster:\")\n",
        "print_top_terms(kmeans.cluster_centers_, vectorizer.get_feature_names_out())\n",
        "\n",
        "# Display top terms for LDA topics\n",
        "print(\"\\nTop terms per LDA topic:\")\n",
        "print_top_terms(lda.components_, vectorizer.get_feature_names_out())"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [
        "BVz7QJSjA2hu"
      ],
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
